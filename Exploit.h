#pragma once
#include <string>



class Exploit{
public:
    virtual ~Exploit() {} 
    virtual std::string getName() const = 0; 
    //function that returns a string and is const (wont modify any variables within scope) = 0 
    //means abstract ( entirely virual ) function that doesnt exist until overwritten
    virtual std::string instructions() const = 0; // have the exploit give "instructions" for console
    virtual void options() = 0;
    virtual void execute() = 0;
    double incomeMultiplier = 0.00;
};

extern "C" __declspec(dllexport) Exploit* create_exploit();
// Syntax breakdown

//Extern C means use C language style linkage, do not mangle function naes

// __declspec(dllexport) exports function from DLL so other programs can access it

//Exploit* create_exploit() is the actual function that returns a pointer to the Exploit class


// Compile DLL from cpp file

// g++ -shared -o exploitname.dll exploitname.cpp